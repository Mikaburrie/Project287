-- Copyright (C) 2019  Intel Corporation. All rights reserved.
-- Your use of Intel Corporation's design tools, logic functions 
-- and other software and tools, and any partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Intel Program License 
-- Subscription Agreement, the Intel Quartus Prime License Agreement,
-- the Intel FPGA IP License Agreement, or other applicable license
-- agreement, including, without limitation, that your use is for
-- the sole purpose of programming logic devices manufactured by
-- Intel and sold by Intel or its authorized distributors.  Please
-- refer to the applicable agreement for further details, at
-- https://fpgasoftware.intel.com/eula.

-- Quartus Prime generated Memory Initialization File (.mif)

WIDTH=32;
DEPTH=256;

ADDRESS_RADIX=UNS;
DATA_RADIX=BIN;

CONTENT BEGIN
	-- Program Selector
	0	:	00000000000000000000000000010011; -- NOP
	1	:	00001110000000000010111110100011; -- SW x0 x0 255 <- back
	2	:	00001111111100000010000010000011; -- LW x1 x0 255 <- prog_select
	3	:	00010000000000001111000100010011; -- ANDI x2 x1 256
	4	:	11111110001000000000110011100011; -- BEQ x2 x0 prog_select (-8)
	5	:	00001111111100000010000010000011; -- LW x1 x0 255 <- prog_select_go
	6	:	00010000000000001111000100010011; -- ANDI x2 x1 256
	7	:	11111110001000000001110011100011; -- BNE x2 x0 prog_select_go (-8)
	8	:	00001111111100001111000010010011; -- ANDI x1 x1 255
	9	:	00000000000100001111000100010011; -- ANDI x2 x1 1
	10	:	00000100001000000001110001100011; -- BNE x2 x0 prog1 (88)
	11	:	00000000001000001111000100010011; -- ANDI x2 x1 2
	12	:	00001000001000000001010001100011; -- BNE x2 x0 prog2 (136)
	13	:	00000000010000001111000100010011; -- ANDI x2 x1 4
	14	:	00010010001000000001100001100011; -- BNE x2 x0 prog3 (304)
	15	:	00000000100000001111000100010011; -- ANDI x2 x1 8
	16	:	00000000000000000000000000010011; -- BNE x2 x0 prog4
	17	:	00000001000000001111000100010011; -- ANDI x2 x1 16
	18	:	00000000000000000000000000010011; -- BNE x2 x0 prog5
	19	:	00000010000000001111000100010011; -- ANDI x2 x1 32
	20	:	00000000000000000000000000010011; -- BNE x2 x0 prog6
	21	:	00000100000000001111000100010011; -- ANDI x2 x1 64
	22	:	00000000000000000000000000010011; -- BNE x2 x0 prog7
	23	:	00001000000000001111000100010011; -- ANDI x2 x1 128
	24	:	00000000000000000000000000010011; -- BNE x2 x0 prog8
	25	:	11111010000111111111000001101111; -- JAL x0 -96
	[26..31]	:	00000000000000000000000000010011; -- NOP
	
	-- Program 1 (counting)
	32	:	00000000000000000000000010010011; -- ADDI x1 x0 0
	33	:	00001110000100000010111110100011; -- SW x1 x0 255 <- loop
	34	:	00000000000100001000000010010011; -- ADDI x1 x1 1
	35	:	00001111111100000010000100000011; -- LW x2 x0 255
	36	:	10000000000000010111000100010011; -- ANDI x2 x2 2048
	37	:	11111110001000000000100011100011; -- BEQ x2 x0 loop (-16)
	38	:	00001111111100000010000100000011; -- LW x2 x0 255 <- btn_down
	39	:	10000000000000010111000100010011; -- ANDI x2 x2 2048
	40	:	11111110001000000001110011100011; -- BNE x2 x0 btn_down (-8)
	41	:	00000000000000000000000001100111; -- JALR x0 x0 0
	[42..45]	:	00000000000000000000000000010011; -- NOP
	
	-- Program 2 (multiplication)
	46	:	00000000000000000000111110010011; -- ADDI x31 x0 0
	47	:	00000000001000000000000010010011; -- ADDI x1 x0 2
	48	:	00000000000100000000000100010011; -- ADDI x2 x0 1
	49	:	00000000000000000000000110010011; -- ADDI x3 x0 0
	50	:	00000000000000000000001000010011; -- ADDI x4 x0 0
	51	:	00001111111100000010111110100011; -- SW x31 x0 255 <- loop
	52	:	00001111111100000010001010000011; -- LW x5 x0 255 <- loop_no_write
	53	:	10000000000000101111001100010011; -- ANDI x6 x5 2048
	54	:	00000000011000000000010001100011; -- BEQ x6 x0 check_a (8)
	55	:	00000000000000000000000001100111; -- JALR x0 x0 0
	56	:	01000000000000101111001100010011; -- ANDI x6 x5 1024 <- check_a
	57	:	00000000011000000000100001100011; -- BEQ x6 x0 check_b (16)
	58	:	00001111111100101111000010010011; -- ANDI x1 x5 255
	59	:	00001110000100000010111110100011; -- SW x1 x0 255
	60	:	11111110000111111111000001101111; -- JAL x0 loop_no_write (-32)
	61	:	00100000000000101111001100010011; -- ANDI x6 x5 512 <- check_b
	62	:	00000000011000000000100001100011; -- BEQ x6 x0 check_mult (16)
	63	:	00001111111100101111000100010011; -- ANDI x2 x5 255
	64	:	00001110001000000010111110100011; -- SW x2 x0 255
	65	:	11111100110111111111000001101111; -- JAL x0 loop_no_write (-52)
	66	:	00000000000100011001011001100011; -- BNE x1 x3 mult (12) <- check_mult
	67	:	00000000001000100001010001100011; -- BNE x2 x4 mult (8)
	68	:	11111011110111111111000001101111; -- JAL x0 loop (-68)
	69	:	00000000000000000000111110010011; -- ADDI x31 x0 0 <- mult
	70	:	00000000100000000000001010010011; -- ADDI x5 x0 8
	71	:	00000000000100000000001100010011; -- ADDI x6 x0 1
	72	:	01000000011000101000001010110011; -- SUB x5 x5 x6 <- mult_loop
	73	:	00000000010100110001001110110011; -- SLL x7 x6 x5
	74	:	00000000000100111111001110110011; -- AND x7 x7 x1
	75	:	00000000011100000000011001100011; -- BEQ x7 x0 check_ctr (12)
	76	:	00000000010100010001001110110011; -- SLL x7 x2 x5
	77	:	00000000011111111000111110110011; -- ADD x31 x31 x7
	78	:	11111110000000101001010011100011; -- BNE x5 x0 mult_loop (-24) <- check_ctr
	79	:	00000000000000001000000110010011; -- ADDI x3 x1 0
	80	:	00000000000000010000001000010011; -- ADDI x4 x2 0
	81	:	11111000100111111111000001101111; -- JAL x0 loop (-120)
	[82..89]	:   00000000000000000000000000010011; -- NOP
	
	-- Program 3 (fibonacci)
	90	:	00000000000000000000000010010011; -- ADDI x1 x0 0
	91	:	00000000000100000000000110010011; -- ADDI x3 x0 1
	92	:	00001110000100000010111110100011; -- SW x1 x0 255 <- loop
	93	:	00000000001100001000001000110011; -- ADD x4 x3 x1
	94	:	00000000000000011000000010010011; -- ADDI x1 x3 0
	95	:	00000000000000100000000110010011; -- ADDI x3 x4 0
	96	:	00001111111100000010000100000011; -- LW x2 x0 255
	97	:	10000000000000010111000100010011; -- ANDI x2 x2 2048
	98	:	11111110001000000000010011100011; -- BEQ x2 x0 loop (-24)
	99	:	00001111111100000010000100000011; -- LW x2 x0 255 <- btn_down
	100	:	10000000000000010111000100010011; -- ANDI x2 x2 2048
	101	:	11111110001000000001110011100011; -- BNE x2 x0 btn_down (-8)
	102	:	00000000000000000000000001100111; -- JALR x0 x0 0
	
	[103..255]	:   00000000000000000000000000010011; -- NOP
END;
